% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils_reactive.R
\name{reactive_validate}
\alias{reactive_validate}
\title{Validates Shiny-module input, returns reactive}
\usage{
reactive_validate(x, .f = identity, message, label = NULL, ...)
}
\arguments{
\item{x}{expression, or  \code{shiny::\link[shiny]{reactive}}
that returns an expression}

\item{.f}{function that takes a single arg (object), returns TRUE if valid}

\item{message}{character, passed to \code{shiny::\link[shiny]{need}}}

\item{label}{character, passed to \code{shiny::\link[shiny]{need}}}

\item{...}{other args passed along to \code{.f}}
}
\value{
\code{shiny::\link[shiny]{reactive}} that returns:
\describe{
  \item{\code{x()}}{if \code{x} is reactive}
  \item{\code{x}}{if \code{x} is not reactive}
}
}
\description{
Using this function at the start of your Shiny module
allows you to call your modules using arguments that may or may
not be reactive.
}
\details{
This function does three things, but these things are associated
as to form a pattern that merits its own function. For a given expression \code{x}:

\enumerate{
  \item{if \code{x} is reactive, set \code{y <- x()};
    if \code{x} is not reactive, set \code{y <- x}}
  \item{validate \code{y}, using \code{shiny::\link[shiny]{validate}} and
    \code{shiny::\link[shiny]{need}} with \code{.f}, \code{message},
    \code{label}, and \code{...}}
  \item{return \code{shiny::\link[shiny]{reactive}(y)}
    to use later in your module}
}
}
\examples{
library("shiny")

# module function
summary_server <- function(input, output, session, df){

  rct_df <- reactive_validate(df, is.data.frame)

  rct_summary <- reactive(summary(rct_df()))

  rct_summary
}

# server function
shinyServer(function(input, output, session){

  # either of these constructions will work

  df <- mtcars
  rct_summary <- callModule(summary_server, "summary", df)

  rct_df <- reactive(mtcars)
  rct_summary <- callModule(summary_server, "summary", rct_df)

})

}

